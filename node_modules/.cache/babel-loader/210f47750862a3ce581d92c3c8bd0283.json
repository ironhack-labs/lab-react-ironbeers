{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport mapContextToProps from 'react-context-toolbox/mapContextToProps';\nimport BaseDropdown from 'react-overlays/Dropdown';\nimport chain from './utils/createChainedFunction';\nimport { createBootstrapComponent } from './ThemeProvider';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownItem from './DropdownItem';\nimport SelectableContext from './SelectableContext';\nimport createWithBsPrefix from './utils/createWithBsPrefix';\nvar defaultProps = {\n  as: 'div',\n  navbar: false\n};\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Dropdown, _React$Component);\n\n  function Dropdown() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleSelect = function (key, event) {\n      if (_this.props.onSelect) _this.props.onSelect(key, event);\n\n      _this.handleToggle(false, event, 'select');\n    };\n\n    _this.handleToggle = function (show, event, source) {\n      if (source === void 0) {\n        source = event.type;\n      }\n\n      if (event.currentTarget === document) source = 'rootClose';\n\n      _this.props.onToggle(show, event, {\n        source: source\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = Dropdown.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        bsPrefix = _this$props.bsPrefix,\n        drop = _this$props.drop,\n        show = _this$props.show,\n        className = _this$props.className,\n        Component = _this$props.as,\n        alignRight = _this$props.alignRight,\n        _1 = _this$props.onSelect,\n        _3 = _this$props.onToggle,\n        _4 = _this$props.navbar,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"bsPrefix\", \"drop\", \"show\", \"className\", \"as\", \"alignRight\", \"onSelect\", \"onToggle\", \"navbar\"]);\n\n    delete props.onToggle;\n    return React.createElement(SelectableContext.Provider, {\n      value: this.handleSelect\n    }, React.createElement(BaseDropdown.ControlledComponent, {\n      drop: drop,\n      show: show,\n      alignEnd: alignRight,\n      onToggle: this.handleToggle,\n      itemSelector: \".\" + bsPrefix + \"-item:not(.disabled):not(:disabled)\"\n    }, function (_ref) {\n      var dropdownProps = _ref.props;\n      return React.createElement(Component, _extends({}, props, dropdownProps, {\n        className: classNames(className, show && 'show', (!drop || drop === 'down') && bsPrefix, drop === 'up' && 'dropup', drop === 'right' && 'dropright', drop === 'left' && 'dropleft')\n      }));\n    }));\n  };\n\n  return Dropdown;\n}(React.Component);\n\nDropdown.defaultProps = defaultProps;\nvar UncontrolledDropdown = createBootstrapComponent(BaseDropdown.deferControlTo(Dropdown), 'dropdown');\nvar DecoratedDropdown = mapContextToProps(SelectableContext, function (onSelect, props) {\n  return {\n    onSelect: chain(props.onSelect, onSelect)\n  };\n}, UncontrolledDropdown);\nDecoratedDropdown.Toggle = DropdownToggle;\nDecoratedDropdown.Menu = DropdownMenu;\nDecoratedDropdown.Item = DropdownItem;\nDecoratedDropdown.Header = createWithBsPrefix('dropdown-header', {\n  defaultProps: {\n    role: 'heading'\n  }\n});\nDecoratedDropdown.Divider = createWithBsPrefix('dropdown-divider', {\n  defaultProps: {\n    role: 'separator'\n  }\n});\nexport default DecoratedDropdown;","map":null,"metadata":{},"sourceType":"module"}